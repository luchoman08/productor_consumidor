#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>

#define BUFF_SIZE   5		/* total number of slots */
#define NP          3		/* total number of producers */
#define NC          3		/* total number of consumers */
#define NITERS      4		/* number of items produced/consumed */

typedef struct {
    int buf[BUFF_SIZE];   /* shared var */
    int in;         	  /* buf[in%BUFF_SIZE] is the first empty slot */
    int out;        	  /* buf[out%BUFF_SIZE] is the first full slot */
    sem_t full;     	  /* keep track of the number of full spots */
    sem_t empty;    	  /* keep track of the number of empty spots */
    sem_t mutex;    	  /* enforce mutual exclusion to shared data */
} sbuf_t;

sbuf_t shared;

void *Producer(void *arg)
{
    int i, item, index;

    index = (int)arg;

    for (i=0; i < NITERS; i++) {

        /* Produce item */
        item = i;	

        /* Prepare to write item to buf */

        /* If there are no empty slots, wait */
        sem_wait(&shared.empty);//informa que habra una posicion vacia menos
        /* If another thread uses the buffer, wait */
        sem_wait(&shared.mutex);//informa 
        shared.buf[shared.in] = item;
        shared.in = (shared.in+1)%BUFF_SIZE;
        printf("[P%d] Producing %d ...\n", index, item); fflush(stdout);
        /* Release the buffer */
        sem_post(&shared.mutex);
        /* Increment the number of full slots */
        sem_post(&shared.full);

        /* Interleave  producer and consumer execution */
        if (i % 2 == 1) sleep(1);
    }
    return NULL;
}

void *Consumer(void *arg)
{
    /* Fill in the code here */
    int i, item, index;
        index = (int)arg;

    for (i=0; i < NITERS; i++) {
		item = i;
    sem_wait(&shared.full);// si todas las posiciones estan vacias
    sem_wait(&shared.mutex);// si otro programa esta accediendo a la variable critica
   item= shared.buf[shared.out]; //toma el item que esta en la posicion y lo consume
        shared.out = (shared.out+1)%BUFF_SIZE; //aumenta la cantidad de slots vacios
        printf("------>[C%d] Consumig %d \n", index, item); fflush(stdout);
        sem_post(&shared.mutex);//informa que termino la parte critica
        sem_post(&shared.empty);//informa que las ahora hay una posicion vacia mas
        if (i % 2 == 1) sleep(1);//pausa el programa por un momento para permitir la ejecucion paralela
}
    
    
}

int main()
{
    pthread_t idP, idC;
    int index;

    sem_init(&shared.full, 0, 0);
    sem_init(&shared.empty, 0, BUFF_SIZE);

    /* Insert code here to initialize mutex*/
    sem_init(&shared.mutex, 0, 1);

    for (index = 0; index < NP; index++)
    {  
       /* Create a new producer */
       pthread_create(&idP, NULL, Producer, (void*)index);
    }

    /* Insert code here to create NC consumers */
for (index = 0; index < NC; index++)
    {  
       /* Create a new producer */
       pthread_create(&idC, NULL, Consumer, (void*)index);
    }
    pthread_exit(NULL);
}
